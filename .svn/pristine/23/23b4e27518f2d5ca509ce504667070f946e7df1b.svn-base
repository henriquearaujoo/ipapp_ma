package br.com.speedy.appapp_ma.fragment;

import android.animation.Animator;
import android.animation.AnimatorListenerAdapter;
import android.app.AlertDialog;
import android.content.DialogInterface;
import android.os.Build;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.support.v4.app.DialogFragment;
import android.support.v4.app.ListFragment;
import android.support.v4.widget.SwipeRefreshLayout;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ListView;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

import br.com.speedy.appapp_ma.R;
import br.com.speedy.appapp_ma.adapter.ArmazenamentoAdapter;
import br.com.speedy.appapp_ma.dialog.DialogDadosLoteEntrada;
import br.com.speedy.appapp_ma.dialog.DialogDadosSaida;
import br.com.speedy.appapp_ma.dialog.DialogFiltroPesquisaSaida;
import br.com.speedy.appapp_ma.model.Armazenamento;
import br.com.speedy.appapp_ma.model.Peixe;
import br.com.speedy.appapp_ma.util.HttpConnection;
import br.com.speedy.appapp_ma.util.SessionApp;
import br.com.speedy.appapp_ma.util.SharedPreferencesUtil;

public class SaidaFragment extends ListFragment implements Runnable, SwipeRefreshLayout.OnRefreshListener {

    public static final int ATUALIZAR_LISTA = 1;
    public static final int ATUALIZAR_LISTA_SWIPE = 2;

    // TODO: Rename parameter arguments, choose names that match
    // the fragment initialization parameters, e.g. ARG_ITEM_NUMBER
    private static final String ARG_PARAM1 = "param1";
    private static final String ARG_PARAM2 = "param2";

    // TODO: Rename and change types of parameters
    private String mParam1;
    private String mParam2;

    private List<Armazenamento> armazenamentos;

    private Armazenamento armazenamento;

    private View armazenamentosStatus;

    private View armazenamentosLista;

    private ArmazenamentoAdapter adapter;

    private Thread threadArmazenamento;

    private SwipeRefreshLayout refreshLayout;

    private Button btPesquisar;

    private Button btFiltro;

    // TODO: Rename and change types of parameters
    public static SaidaFragment newInstance(int position) {
        SaidaFragment fragment = new SaidaFragment();
        Bundle args = new Bundle();
        args.putInt(ARG_PARAM1, position);
        fragment.setArguments(args);
        return fragment;
    }

    /**
     * Mandatory empty constructor for the fragment manager to instantiate the
     * fragment (e.g. upon screen orientation changes).
     */
    public SaidaFragment() {
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        View view = inflater.inflate(R.layout.fragment_saida_list, container, false);

        armazenamentosLista = view.findViewById(R.id.armazenamentos_lista);

        armazenamentosStatus = view.findViewById(R.id.armazenamentos_status);

        btPesquisar = (Button) view.findViewById(R.id.btSPesquisar);

        btPesquisar.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                if ((SessionApp.getFiltroPeixeS() == null || SessionApp.getFiltroPeixeS().isEmpty())
                        && (SessionApp.getFiltroCurral() == null || SessionApp.getFiltroCurral().isEmpty())
                        && (SessionApp.getFiltroCamara() == null || SessionApp.getFiltroCamara().isEmpty())){
                    showDialogInformacao("Preencha pelo menos um dos campos de pesquisa.");
                }else {
                    showProgress(true);
                    threadArmazenamento = new Thread(SaidaFragment.this);
                    threadArmazenamento.start();
                }
            }
        });

        btFiltro = (Button) view.findViewById(R.id.btSFiltro);

        btFiltro.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                DialogFragment filtro = new DialogFiltroPesquisaSaida();
                filtro.show(getFragmentManager(), "dadosFiltroSaida");
            }
        });

        initSwipeDownToRefresh(view);

        return view;
    }

    public void getArmazenamentos(){

        JSONObject object = new JSONObject();
        try {
            object.put("descricao", SessionApp.getFiltroPeixeS());
            object.put("camara", SessionApp.getFiltroCamara());
            object.put("curral", SessionApp.getFiltroCurral());
        } catch (JSONException e) {
            e.printStackTrace();
        }

        callServer("post-json", object.toString());

        Message msg = new Message();
        msg.what = ATUALIZAR_LISTA;
        handler.sendMessage(msg);
    }

    public void getArmazenamentosJSON(String data){
        armazenamentos = new ArrayList<Armazenamento>();

        try {
            JSONArray ja = new JSONArray(data);

            for (int i = 0; i < ja.length() ; i++) {
                Armazenamento armazenamento = new Armazenamento();
                armazenamento.setId(ja.getJSONObject(i).getLong("id"));
                armazenamento.setCamara(ja.getJSONObject(i).getString("camara"));
                armazenamento.setCurral(ja.getJSONObject(i).getString("curral"));
                armazenamento.setPeso(new BigDecimal(ja.getJSONObject(i).getString("peso")));

                JSONObject jPeixe = ja.getJSONObject(i).getJSONObject("peixe");
                Peixe peixe = new Peixe();
                peixe.setDescricao(jPeixe.getString("descricao"));

                armazenamento.setPeixe(peixe);

                armazenamentos.add(armazenamento);
            }

        }catch (Exception e){
            e.printStackTrace();
        }
    }

    private void callServer(final String method, final String data){

        String ipServidor = SharedPreferencesUtil.getPreferences(getActivity(), "ip_servidor");

        String resposta = HttpConnection.getSetDataWeb("http://" + ipServidor + ":8080/ws_ipapp/webapi/myresource/getPeixesArmazenados", method, data);

        if (!resposta.isEmpty())
            getArmazenamentosJSON(resposta);
    }

    @Override
    public void run() {
        getArmazenamentos();
    }

    public void showDialogInformacao(String msg){
        final AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());

        builder.setTitle("Informação");

        builder.setMessage(msg);

        builder.setPositiveButton("Fechar", new DialogInterface.OnClickListener() {
            public void onClick(DialogInterface dialog, int id) {
                dialog.cancel();
            }
        });

        AlertDialog dialog = builder.create();
        dialog.show();
    }

    private void showProgress(final boolean show) {

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB_MR2) {
            int shortAnimTime = getResources().getInteger(
                    android.R.integer.config_shortAnimTime);

            armazenamentosStatus.setVisibility(View.VISIBLE);
            armazenamentosStatus.animate().setDuration(shortAnimTime)
                    .alpha(show ? 1 : 0)
                    .setListener(new AnimatorListenerAdapter() {
                        @Override
                        public void onAnimationEnd(Animator animation) {
                            armazenamentosStatus.setVisibility(show ? View.VISIBLE
                                    : View.GONE);
                        }
                    });

            armazenamentosLista.setVisibility(View.VISIBLE);
            armazenamentosLista.animate().setDuration(shortAnimTime)
                    .alpha(show ? 0 : 1)
                    .setListener(new AnimatorListenerAdapter() {
                        @Override
                        public void onAnimationEnd(Animator animation) {
                            armazenamentosLista.setVisibility(show ? View.GONE
                                    : View.VISIBLE);
                        }
                    });
        } else {
            armazenamentosStatus.setVisibility(show ? View.VISIBLE : View.GONE);
            armazenamentosLista.setVisibility(show ? View.GONE : View.VISIBLE);
        }
    }

    private Handler handler = new Handler(){

        @Override
        public void handleMessage(Message msg) {
            // TODO Auto-generated method stub
            switch (msg.what) {

                case ATUALIZAR_LISTA:

                    adapter = new ArmazenamentoAdapter(getActivity(), armazenamentos);

                    setListAdapter(adapter);

                    if (isAdded())
                        showProgress(false);

                    break;

                case ATUALIZAR_LISTA_SWIPE:

                    adapter = new ArmazenamentoAdapter(getActivity(), armazenamentos);

                    setListAdapter(adapter);

                    stopSwipeRefresh();

                    break;
                default:
                    break;
            }
        }
    };

    @Override
    public void onListItemClick(ListView l, View v, int position, long id) {
        super.onListItemClick(l, v, position, id);

        armazenamento = (Armazenamento) this.getListAdapter().getItem(position);

        SessionApp.setArmazenamento(armazenamento);

        DialogFragment dadosSaida = new DialogDadosSaida();
        dadosSaida.show(getFragmentManager(), "dadosSaida");

    }

    public void initSwipeDownToRefresh(View view){
        refreshLayout = (SwipeRefreshLayout) view.findViewById(R.id.refreshLayout);
        refreshLayout.setOnRefreshListener(this);
        refreshLayout.setColorScheme(android.R.color.holo_blue_light,
                android.R.color.white, android.R.color.holo_blue_light,
                android.R.color.white);
    }

    @Override
    public void onRefresh() {

        new Thread(new Runnable() {
            @Override
            public void run() {
                JSONObject object = new JSONObject();
                try {
                    object.put("descricao", SessionApp.getFiltroPeixeS());
                    object.put("camara", SessionApp.getFiltroCamara());
                    object.put("curral", SessionApp.getFiltroCurral());
                } catch (JSONException e) {
                    e.printStackTrace();
                }

                callServer("post-json", object.toString());

                Message msg = new Message();
                msg.what = ATUALIZAR_LISTA_SWIPE;
                handler.sendMessage(msg);
            }
        }).start();
    }

    private void stopSwipeRefresh() {
        refreshLayout.setRefreshing(false);
    }
}
