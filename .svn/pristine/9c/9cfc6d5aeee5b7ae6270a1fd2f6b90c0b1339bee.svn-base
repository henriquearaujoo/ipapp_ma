package br.com.speedy.appapp_ma.fragment;

import android.animation.Animator;
import android.animation.AnimatorListenerAdapter;
import android.app.AlertDialog;
import android.app.ProgressDialog;
import android.content.DialogInterface;
import android.os.Build;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.support.v4.app.Fragment;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ExpandableListAdapter;
import android.widget.ExpandableListView;
import android.widget.TextView;

import org.json.JSONArray;
import org.json.JSONObject;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

import br.com.speedy.appapp_ma.R;
import br.com.speedy.appapp_ma.adapter.ResumoAdapter;
import br.com.speedy.appapp_ma.util.ArmazenamentoRetiradaAux;
import br.com.speedy.appapp_ma.util.DialogUtil;
import br.com.speedy.appapp_ma.util.HttpConnection;
import br.com.speedy.appapp_ma.util.ItemResumo;
import br.com.speedy.appapp_ma.util.SessionApp;
import br.com.speedy.appapp_ma.util.SharedPreferencesUtil;

public class ResumoFragment extends Fragment implements Runnable {

    public static final int ATUALIZAR_LISTA = 1;
    public static final int FINALIZAR_ENVIO = 2;

    // TODO: Rename parameter arguments, choose names that match
    // the fragment initialization parameters, e.g. ARG_ITEM_NUMBER
    private static final String ARG_PARAM1 = "param1";
    private static final String ARG_PARAM2 = "param2";

    // TODO: Rename and change types of parameters
    private String mParam1;
    private String mParam2;

    private List<ItemResumo> itensResumo;

    private ExpandableListView eListView;

    private View itemStatus;

    private View itemLista;

    private ResumoAdapter adapter;

    private Thread threadResumo;

    private TextView txtTotalArmazenar;

    private TextView txtTotalRetirar;

    private View view;

    private BigDecimal totalArm;

    private BigDecimal totalRet;

    private Button btEnviarDados;

    private ProgressDialog progressDialog;

    private Boolean valido;

    // TODO: Rename and change types of parameters
    public static ResumoFragment newInstance(int position) {
        ResumoFragment fragment = new ResumoFragment();
        Bundle args = new Bundle();
        args.putInt(ARG_PARAM1, position);
        fragment.setArguments(args);
        return fragment;
    }

    /**
     * Mandatory empty constructor for the fragment manager to instantiate the
     * fragment (e.g. upon screen orientation changes).
     */
    public ResumoFragment() {
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        view = inflater.inflate(R.layout.fragment_resumo_list, container, false);

        btEnviarDados = (Button) view.findViewById(R.id.btRFEnviarArmsERets);

        btEnviarDados.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                prepararEnviarDados();
            }
        });

        eListView = (ExpandableListView) view.findViewById(R.id.eList);

        eListView.setOnGroupClickListener(new ExpandableListView.OnGroupClickListener() {
            @Override
            public boolean onGroupClick(ExpandableListView parent, View v, int groupPosition, long id) {
                ItemResumo i = itensResumo.get(groupPosition);
                showDialogRemoverPai(i, groupPosition);
                return true;
            }
        });

        eListView.setOnChildClickListener(new ExpandableListView.OnChildClickListener() {
            @Override
            public boolean onChildClick(ExpandableListView parent, View v, int groupPosition, int childPosition, long id) {
                ItemResumo i = itensResumo.get(groupPosition);
                ArmazenamentoRetiradaAux ar = itensResumo.get(groupPosition).getListaAR().get(childPosition);
                showDialogRemoverFilho(i, ar, groupPosition, childPosition);
                return true;
            }
        });

        txtTotalArmazenar = (TextView) view.findViewById(R.id.txtRFTotalPesoArm);

        txtTotalRetirar = (TextView) view.findViewById(R.id.txtRFTotalPesoRet);

        txtTotalArmazenar.setText(BigDecimal.ZERO.toString());
        txtTotalRetirar.setText(BigDecimal.ZERO.toString());

        return view;
    }

    public void runThread(){
        threadResumo = new Thread(this);
        threadResumo.start();
    }

    public void prepararEnviarDados(){

        if (itensResumo != null && itensResumo.size() > 0){
            showDialogConfirmacaoEnvio("Confirma o envio dos dados?");
        }else{
            DialogUtil.showDialogAdvertencia(getActivity(), "Adicione pelo menos um armazenamento ou uma retirada antes de enviar os dados.");
        }

    }

    public void enviarDados(){

        progressDialog = ProgressDialog.show(getActivity(), "", "Finalizando, aguarde.", false, false);

        new Thread(new Runnable() {
            @Override
            public void run() {
                JSONObject objectEnvio = new JSONObject();

                try{
                    JSONArray jLista = new JSONArray();

                    for (ItemResumo itemResumo : itensResumo){

                        for (ArmazenamentoRetiradaAux aux : itemResumo.getListaAR()) {

                            JSONObject jItemResumo = new JSONObject();
                            jItemResumo.put("tipo", itemResumo.getTipo());
                            jItemResumo.put("peso", aux.getPeso());
                            jItemResumo.put("qtdeEmbalagem", aux.getQtdeEmbalagem());
                            jItemResumo.put("pesoEmbalagem", aux.getPesoEmbalagem() != null ? aux.getPesoEmbalagem() : "0");

                            JSONObject jPeixe = new JSONObject();
                            jPeixe.put("id", aux.getPeixe().getId());

                            jItemResumo.put("peixe", jPeixe);

                            if (itemResumo.getTipo().equals("Armazenar")){
                                JSONObject jCamara = new JSONObject();
                                jCamara.put("id", aux.getCamara().getId());

                                jItemResumo.put("camara", jCamara);

                                JSONObject jPosicao = new JSONObject();
                                jPosicao.put("id", aux.getPosicaoCamara().getId());

                                jItemResumo.put("posicaoCamara", jPosicao);

                                JSONObject jEmbalagem = new JSONObject();
                                jEmbalagem.put("id", aux.getEmbalagem().getId());

                                jItemResumo.put("embalagem", jEmbalagem);

                                JSONObject jTipoPeixe = new JSONObject();
                                jTipoPeixe.put("id", aux.getTipoPeixe().getId());

                                jItemResumo.put("tipoPeixe", jTipoPeixe);

                                JSONObject jTamanho = new JSONObject();
                                jTamanho.put("id", aux.getTamanhoPeixe().getId());

                                jItemResumo.put("tamanhoPeixe", jTamanho);


                            }else{
                                jItemResumo.put("destino", aux.getDestino().equals("Processo") ? "PROCESSO" : "DESCARTE");
                            }

                            jLista.put(jItemResumo);
                        }

                    }

                    objectEnvio.put("armazenamentosERetiradas", jLista);

                    String resposta = callServer("post-json", objectEnvio.toString());

                    JSONObject jResposta = new JSONObject(resposta);

                    valido = jResposta.getBoolean("valido");

                    Message msg = new Message();
                    msg.what = FINALIZAR_ENVIO;
                    handler.sendMessage(msg);

                }catch (Exception e){
                    Log.e("IPAPP_MA - Resumo", e.getMessage());
                    DialogUtil.showDialogAdvertencia(getActivity(), "NÃ£o foi possivel enviar os dados.");
                }
            }
        }).start();
    }

    private String callServer(final String method, final String data){

        String ipServidor = SharedPreferencesUtil.getPreferences(getActivity(), "ip_servidor");

        String endereco_ws = SharedPreferencesUtil.getPreferences(getActivity(), "endereco_ws");

        String resposta = HttpConnection.getSetDataWeb("http://" + ipServidor + ":8080" + endereco_ws + "salvarArmazenamentosERetiradas", method, data);

        return resposta;

    }

    public void getItens(){

        itensResumo = SessionApp.getItens() != null ? SessionApp.getItens() : new ArrayList<ItemResumo>();

        if (itensResumo.size() > 0)
            Collections.sort(itensResumo, new SortByTipo());

        Message msg = new Message();
        msg.what = ATUALIZAR_LISTA;
        handler.sendMessage(msg);
    }

    public class SortByTipo implements Comparator<ItemResumo>{

        @Override
        public int compare(ItemResumo p1, ItemResumo p2) {
            return p1.getTipo().compareToIgnoreCase(p2.getTipo());
        }
    }

    @Override
    public void onResume() {
        super.onResume();
        //runThread();

    }

    @Override
    public void run() {

        getItens();
    }

    private void showProgress(final boolean show) {

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB_MR2) {
            int shortAnimTime = getResources().getInteger(
                    android.R.integer.config_shortAnimTime);

            itemStatus.setVisibility(View.VISIBLE);
            itemStatus.animate().setDuration(shortAnimTime)
                    .alpha(show ? 1 : 0)
                    .setListener(new AnimatorListenerAdapter() {
                        @Override
                        public void onAnimationEnd(Animator animation) {
                            itemStatus.setVisibility(show ? View.VISIBLE
                                    : View.GONE);
                        }
                    });

            itemLista.setVisibility(View.VISIBLE);
            itemLista.animate().setDuration(shortAnimTime)
                    .alpha(show ? 0 : 1)
                    .setListener(new AnimatorListenerAdapter() {
                        @Override
                        public void onAnimationEnd(Animator animation) {
                            itemLista.setVisibility(show ? View.GONE
                                    : View.VISIBLE);
                        }
                    });
        } else {
            itemStatus.setVisibility(show ? View.VISIBLE : View.GONE);
            itemLista.setVisibility(show ? View.GONE : View.VISIBLE);
        }
    }

    private Handler handler = new Handler(){

        @Override
        public void handleMessage(Message msg) {
            // TODO Auto-generated method stub
            switch (msg.what) {

                case ATUALIZAR_LISTA:

                    if (itensResumo != null) {

                        totalArm = BigDecimal.ZERO;
                        totalRet = BigDecimal.ZERO;

                        for (ItemResumo i : itensResumo){
                            if (i.getTipo().equals("Armazenar")){
                                for(ArmazenamentoRetiradaAux ar : i.getListaAR()){
                                    totalArm = totalArm.add(ar.getPeso());
                                }
                            }else{
                                for(ArmazenamentoRetiradaAux ar : i.getListaAR()){
                                    totalRet = totalRet.add(ar.getPeso());
                                }
                            }

                        }

                        txtTotalArmazenar.setText(totalArm.toString() + "kg");
                        txtTotalRetirar.setText(totalRet.toString() + "kg");

                        adapter = new ResumoAdapter(getActivity(), itensResumo);

                        setListAdapter(adapter);

                        for (int i = 0; i < adapter.getGroupCount(); i++) {
                            eListView.expandGroup(i);
                        }
                    }

                    break;

                case FINALIZAR_ENVIO:

                    if (progressDialog != null && progressDialog.isShowing()){
                        progressDialog.dismiss();
                        progressDialog = null;
                    }

                    if(valido) {
                        limparSessionApp();
                        runThread();
                        showDialogInformacao("Dados enviados com sucesso");
                    }else
                        DialogUtil.showDialogAdvertencia(getActivity(), "NÃ£o foi possivel enviar os dados.");

                    break;
                default:
                    break;
            }
        }
    };

    public void limparSessionApp(){
        SessionApp.setPeixe(null);
        SessionApp.setItens(null);
    }

    public void setListAdapter (ExpandableListAdapter adapter) {

        eListView.setAdapter(adapter);
    }

    public void showDialogRemoverPai(final ItemResumo itemResumo, final int groupPosition){
        final AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());

        builder.setTitle("ConfirmaÃ§Ã£o");

        builder.setMessage("Deseja remover o item " + itemResumo.getTipo() + " e todos os subitens?");

        builder.setPositiveButton("Sim", new DialogInterface.OnClickListener() {
            public void onClick(DialogInterface dialog, int id) {
                removerPai(groupPosition);
            }
        });

        builder.setNegativeButton("NÃ£o", new DialogInterface.OnClickListener() {
            public void onClick(DialogInterface dialog, int id) {

                dialog.cancel();
            }
        });

        AlertDialog dialog = builder.create();
        dialog.show();
    }

    public void showDialogRemoverFilho(final ItemResumo i, final ArmazenamentoRetiradaAux ar, final int itemPosition, final int childPosition){
        final AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());

        builder.setTitle("ConfirmaÃ§Ã£o");

        int item = childPosition + 1;

        builder.setMessage("Deseja remover o item " + item + " do tipo " + i.getTipo() + "?");

        builder.setPositiveButton("Sim", new DialogInterface.OnClickListener() {
            public void onClick(DialogInterface dialog, int id) {
                removerFilho(itemPosition, childPosition);
            }
        });
        builder.setNegativeButton("NÃ£o", new DialogInterface.OnClickListener() {
            public void onClick(DialogInterface dialog, int id) {
                dialog.cancel();
            }
        });

        AlertDialog dialog = builder.create();
        dialog.show();
    }

    public void showDialogConfirmacaoEnvio(String msg){
        final AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());

        builder.setTitle("ConfirmaÃ§Ã£o");

        builder.setMessage(msg);

        builder.setNegativeButton("Fechar", new DialogInterface.OnClickListener() {
            public void onClick(DialogInterface dialog, int id) {
                dialog.cancel();
            }
        });

        builder.setPositiveButton("Enviar", new DialogInterface.OnClickListener() {
            public void onClick(DialogInterface dialog, int id) {
                enviarDados();
            }
        });

        AlertDialog dialog = builder.create();
        dialog.show();
    }

    public void showDialogInformacao(String msg){
        final AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());

        builder.setTitle("InformaÃ§Ã£o");

        builder.setIcon(R.drawable.ic_information_grey600_48dp);

        builder.setMessage(msg);

        builder.setPositiveButton("Fechar", new DialogInterface.OnClickListener() {
            public void onClick(DialogInterface dialog, int id) {
                dialog.cancel();
            }
        });

        AlertDialog dialog = builder.create();
        dialog.show();
    }

    public void removerPai(int groupPosition){

        SessionApp.getItens().remove(groupPosition);

        runThread();
    }

    public void removerFilho(int groupPosition, int childPosition){

        SessionApp.getItens().get(groupPosition).getListaAR().remove(childPosition);

        if (SessionApp.getItens().get(groupPosition).getListaAR().size() == 0)
            SessionApp.getItens().remove(groupPosition);

        runThread();
    }

}
